*impsort.txt* *impsort*
		     _                                _                      ~
		    (_)_ __ ___  _ __  ___  ___  _ __| |_                    ~
		    | | '_ ` _ \| '_ \/ __|/ _ \| '__| __|                   ~
		    | | | | | | | |_) \__ \ (_) | |  | |_                    ~
		    |_|_| |_| |_| .__/|___/\___/|_|   \__|                   ~
		                |_|                                          ~

==============================================================================
INTRO                                                           *impsort-intro*

|impsort| will sensibly sort your Python import lines, as well as highlight
imported objects.  "Sensibly" means that it will sort groups of imports
without moving them out of their original place in the file.

A similar utility named `isort` does the same thing, but is a little
destructive in doing so.  It tries to hoist almost all imports up to the top
of the file.  This is bad if you're modifying `sys.path` or need to do some
other import sorcery.

Highlighting doesn't have anything to do with the sorting.  It's simply nicety
that was easily achievable the existing code.  It's useful as a way to quickly
see if variables you're using is actually an import being shadowed.  This
includes names from a star import (see: |g:impsort_highlight_star_imports|).


==============================================================================
COMMAND                                                       *impsort-command*

							*:ImpSort* *:ImpSort!*
:{range}ImpSort[!]	Run ImpSort on your Python script.  It accepts an
			optional {range} of lines to sort specifically, but
			any non-import lines in the range will be discarded.

			If [!] is present, "from ... import" lines will be
			grouped by the first module name and separated with
			spaces.

			Map it to your favorite key or run it in the command
			line yourself.  Endless possibilities!

						*:ImpSortAuto* *:ImpSortAuto!*
:ImpSortAuto[!]		Enables automatic sorting in the current buffer.
			Import sorting is performed after |InsertLeave| if the
			cursor is within an import region.  [!] has the same
			effect as in |:ImpSort!|.  After leaving insert mode
			and sorting, an attempt is made to put your cursor
			back on the word you left on.

			If called while automatic sorting is active, it will
			disable it instead.

			This is a fairly broad thing to enable, which is why
			it's per-buffer only.  A utility function
			*impsort#is_sorted()* is available to help you decide
			how and when to enable automatic sorting.

			An example script you would create in
			`after/ftplugin/python.vim`:
>
			if impsort#is_sorted()
			  ImpSortAuto!
			endif
<
			This script will check to see if the current python
			file's imports are already sorted before enabling
			automatic sort.  It's simple, but the ramifications of
			enabling this may not be clear to some users who just
			blindly enable options.  If this is something you want
			to enable on all python files, you will have to
			deliberately enable it yourself.


==============================================================================
CONFIG                                                         *impsort-config*

						     *g:impsort_relative_last*
g:impsort_relative_last		If enabled, relative imports will be moved to
				the bottom of the import section.

				Default: `0`

						*g:impsort_highlight_imported*
g:impsort_highlight_imported	If enabled, highlights all imported objects in
				the buffer on |BufWinEnter| and |TextChanged|.

				Default: `1`

							*pythonImportedObject*
				To highlight group used for imported objects
				is |pythonImportedObject|.  By default, it is
				linked to the `Keyword` highlight group.

					    *g:impsort_highlight_star_imports*
g:impsort_highlight_star_imports
				If enabled, `*` imports will be parsed in an
				external script to highlight objects from the
				module.

				Default: `0`

				If you are using Neovim, this will be done
				asynchronously.


Sort customization ~

There are a few variables that allow you to change the sort order of the
imports.  Though these use the |g:| prefix, the |b:| variants will be
preferred if they're present to allow you to have custom sorting on a
per-buffer basis.

Each can take more than one sort method.  Each method is used in order.  If
one results in an equality, the next is tried.

See also: |impsort-methods|, |sort()|


						      *g:impsort_method_group*
g:impsort_method_group		A list of sort methods for a `group`.

				Default: >
				['length', 'alpha']
<
				A group is defined by the first component in
				the import (the root module).  For example:
>
				import os.path
				from os import path
<
				In both of the cases above, `os` is the
				`group`.  Leading dots (relative imports) are
				included in the group's name.

				Note: Since a `group` requires more than one
				import line from the same root module to be
				effectively sorted, groups that only contain
				one import line (let's call them `orphans`)
				are grouped together and placed above all of
				the other groups.  This is make it easier to
				see them when there are many imports involved.
				Additionally, if |:Impsort!| is used to add
				blank lines between the imports groups, the
				`orphans` would add a lot of unecessary
				whitespace.  For example:
>
				from moduleA import thangs
				from moduleB import things
				from moduleA.thangs import things
<
				Would sort to:
>
				from moduleB import things
				from moduleA import thangs
				from moduleA.thangs import things
<

						     *g:impsort_method_module*
g:impsort_method_module		A list of sort methods for `modules` within a
				group.

				Default: >
				['depth', 'length', 'alpha']
<
				A module is the entire module path immediately
				after "import" or "from".  For example:
>
				import os.path
				from os import path
<
				The modules are "os.path" and "os",
				respecitvely.


						     *g:impsort_method_import*
g:impsort_method_import		A list of sort methods for imported objects.

				Default: >
				['length', 'alpha']
<
				This only affects "from ... import" lines.
				This option sorts the text after "import".
				For Example:
>
				from os import path
<
				In the example above "path" is the imported
				object.


Sort methods ~
							     *impsort-methods*

The following methods are available to use with the variables mentioned above.

alpha	  - Alphabetic sort.
depth	  - Module depth.  Basically how many dots are in the module path.
length	  - The length of a string.
|Funcref|   - A custom sort function.  See: |sort()|



Convenience function~

							  *impsort#sort_top()*
impsort#sort_top({pattern}, {a}, {b})
				This function takes a pattern and returns `1`
				or `-1` to keep it at the top of the sort.  If
				neither {a} or {b} matches or both matches the
				pattern, it returns `0` to allow the next
				method to determine the sort order.

				To keep things sorted to the bottom, you
				simply multiply the return value by `-1`.


Custom sort function ~
							 *impsort-custom-sort*

If you have different needs for sorting, you can use a |Funcref| to change
sorting criteria.  For example, if you wanted `django` to always be at the top
of the import section:

>
	function! s:django_sort(a, b) abort
	  return impsort#sort_top('^django', a:a, a:b)
	endfunction

	let g:impsort_method_group = [function('s:django_sort'), 'length',
		\ 'alpha']
	let g:impsort_method_module = [function('s:django_sort'), 'depth',
		\ 'length', 'alpha']
<

Note: |django-plus| has an option to enable this:
https://github.com/tweekmonster/django-plus.vim


==============================================================================
SORTING                                                       *impsort-sorting*

|impsort| sorts sections of imports and separates them by origin.  A section
is a group of consecutive import lines.

Within each section, imports are sorted by origin:

1. Standard library
2. Third party (in site-packages)
3. local (basically imports not found in 1 and 2)

Each of these origins are separated by a blank line as suggested in PEP8.

Within each origin, the imports are sorted using the methods described in
|impsort-config|.


==============================================================================
LICENSE                                                       *impsort-license*

The MIT License
Copyright (c) 2016 Tommy Allen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


vim:tw=78:ts=8:noet:ft=help:norl:
